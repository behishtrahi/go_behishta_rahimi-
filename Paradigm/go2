// P1Q3

package main

import "fmt"

// Helper function to implement the top-down dynamic programming approach
func fibonacciHelper(number int, memo map[int]int) int {
	// Base cases
	if number <= 1 {
		return number
	}

	// Check if the value is already computed
	if value, exists := memo[number]; exists {
		return value
	}

	// Compute the value and store it in the memo
	memo[number] = fibonacciHelper(number-1, memo) + fibonacciHelper(number-2, memo)
	return memo[number]
}

// Function to get the n-th Fibonacci number
func fibonacci(number int) int {
	memo := make(map[int]int)
	return fibonacciHelper(number, memo)
}

func main() {
	fmt.Println(fibonacci(0))  // 0
	fmt.Println(fibonacci(2))  // 1
	fmt.Println(fibonacci(9))  // 34
	fmt.Println(fibonacci(10)) // 55
	fmt.Println(fibonacci(12)) // 144
}
