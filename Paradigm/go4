//P2Q1

package main

import (
    "fmt"
    "math"
)

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}

func Frog(jumps []int) int {
    n := len(jumps)
    if n == 0 {
        return 0
    }

    // dp array to store the minimum cost to reach each rock
    dp := make([]int, n)
    dp[0] = 0

    for i := 1; i < n; i++ {
        cost1 := dp[i-1] + int(math.Abs(float64(jumps[i]-jumps[i-1])))
        cost2 := math.MaxInt32
        if i > 1 {
            cost2 = dp[i-2] + int(math.Abs(float64(jumps[i]-jumps[i-2])))
        }
        dp[i] = min(cost1, cost2)
    }

    return dp[n-1]
}

func main() {
    fmt.Println(Frog([]int{10, 30, 40, 20}))         // 30
    fmt.Println(Frog([]int{30, 10, 60, 10, 60, 50})) // 40
}
