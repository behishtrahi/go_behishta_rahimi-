// P1 Q3 
 
 
 package main

import "fmt"

func main() {
  data1 := []float64{1, 1, 2, 5, 6, 8, 12, 4, 5, 5, 5, 8, 9}

  fmt.Println("sum: ", sum(data1))       // 71.00
  fmt.Println("mean: ", mean(data1))     // 5.46
  fmt.Println("median: ", median(data1)) // 5.00
  fmt.Println("mode: ", mode(data1))     // 5.00

  data2 := []float64{6, 7, 1, 11, 8, 12, 6, 12, 1, 7, 8, 10, 14}

  fmt.Println("sum: ", sum(data2))       // 103.00
  fmt.Println("mean: ", mean(data2))     // 7.92
  fmt.Println("median: ", median(data2)) // 8.00
  fmt.Println("mode: ", mode(data2))     // 1.00
}

func sum(data []float64) float64 {
  sum := 0
	for _, num := range arr {
		sum += num
	}
	return float64(sum)
}
  return 0


func mean(data []float64) float64 {
  sum := calculateSum(arr)
	mean := sum / float64(len(arr))
	return mean
}
  return 0


func median(data []float64) float64 {
  sort.Ints(arr)
	n := len(arr)
	if n%2 == 0 {
		return float64(arr[n/2-1]+arr[n/2]) / 2.0
	}
	return float64(arr[n/2])
  return 0
}

func mode(data []float64) float64 {
  frequency := make(map[int]int)
	maxCount := 0
	mode := float64(arr[0])

	for _, num := range arr {
		frequency[num]++
		if frequency[num] > maxCount {
			maxCount = frequency[num]
			mode = float64(num)
		} else if frequency[num] == maxCount {
			// If there is a tie in frequency, choose the smallest number
			if float64(num) < mode {
				mode = float64(num)
			}
		}
	}
  return 0
}